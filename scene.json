{
	"camera" : 
	{
		"center" : "0.00000 0.00000 -1.00000",
		"eye" : "0.00000 0.00000 0.00000",
		"up" : "0.00000 1.00000 0.00000"
	},
	"general" : 
	{
		"ambientcolor" : "0.09804 0.09804 0.09804",
		"bloom" : false,
		"bloomhdrfeather" : 0.1,
		"bloomhdriterations" : 8,
		"bloomhdrscatter" : 1.619,
		"bloomhdrstrength" : 2.0,
		"bloomhdrthreshold" : 1.0,
		"bloomstrength" : 2.0,
		"bloomthreshold" : 0.64999998,
		"camerafade" : true,
		"cameraparallax" : false,
		"cameraparallaxamount" : 0.5,
		"cameraparallaxdelay" : 0.1,
		"cameraparallaxmouseinfluence" : 0.5,
		"camerapreview" : true,
		"camerashake" : false,
		"camerashakeamplitude" : 0.5,
		"camerashakeroughness" : 1.0,
		"camerashakespeed" : 3.0,
		"clearcolor" : "0.67451 0.64706 0.57647",
		"clearenabled" : true,
		"farz" : 10000.0,
		"fov" : 50.0,
		"hdr" : false,
		"nearz" : 0.0099999998,
		"orthogonalprojection" : 
		{
			"height" : 1080,
			"width" : 1920
		},
		"skylightcolor" : "0.30000 0.30000 0.30000",
		"zoom" : 1.0
	},
	"objects" : 
	[
		{
			"id" : 131,
			"locktransforms" : true,
			"name" : "root",
			"origin" : "960.00000 540.00000 0.00000",
			"visible" : 
			{
				"script" : "'use strict';\n\nshared.IS_ASPECT_RATIO_LOCKED = false;\n\nshared.LINES_AMPLITUDE = 10;\n\n// must be same as background (not scene) resolution\nshared.REFERENCE_RESOLUTION = new Vec2(2560, 1440);\nshared.REFERENCE_RESOLUTION_HALF = new Vec2(shared.REFERENCE_RESOLUTION.x * 0.5, shared.REFERENCE_RESOLUTION.y * 0.5);\n\n\nfunction updateResolutionData(resolution) {\n\tif (shared.IS_ASPECT_RATIO_LOCKED) {\n\t\tresolution.x = resolution.y * shared.ASPECT_RATIO;\n\t}\n\n\tshared.RESOLUTION = resolution;\n\tshared.RESOLUTION_HALF = new Vec2(resolution.x * 0.5, resolution.y * 0.5);\n\tshared.RESOLUTION_REAL = engine.screenResolution;\n\n\tshared.SCALE_FACTOR = new Vec2(\n\t\tshared.RESOLUTION.x / shared.REFERENCE_RESOLUTION.x,\n\t\tshared.RESOLUTION.y / shared.REFERENCE_RESOLUTION.y\n\t);\n}\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('aspectratio')) {\n\t\tshared.IS_ASPECT_RATIO_LOCKED = Number(properties.aspectratio) != 0;\n\t\tshared.ASPECT_RATIO = Number(properties.aspectratio);\n\n\t\tupdateResolutionData(engine.screenResolution);\n\t}\n}\n\n/**\n * @param {Number} value - screen resolution\n */\nexport function resizeScreen(value) {\n\tupdateResolutionData(value);\n}\n\n/**\n * @param {Number} value - for property 'visible'\n * @return {Number} - update current property value\n */\nexport function init(value) {\n\tupdateResolutionData(engine.screenResolution);\n}\n\n\nshared.clamp = (num, min, max) => {\n\treturn Math.min(Math.max(num, min), max);\n};\n\nshared.getPosition = (origin) => {\n\treturn new Vec2(\n\t\torigin.x * shared.SCALE_FACTOR.x,\n\t\torigin.y * shared.SCALE_FACTOR.y\n\t);\n}\n\nshared.getPositionTopLeft = () => {\n\treturn new Vec2(\n\t\t-shared.RESOLUTION_HALF.x,\n\t\tshared.RESOLUTION_HALF.y\n\t);\n}\n\nshared.getPositionCenterLeft = () => {\n\treturn new Vec2(\n\t\t-shared.RESOLUTION_HALF.x,\n\t\t0\n\t);\n}\n\nshared.getPositionBottomLeft = () => {\n\treturn new Vec2(\n\t\t-shared.RESOLUTION_HALF.x,\n\t\t-shared.RESOLUTION_HALF.y\n\t);\n}\n\nshared.getPositionTopCenter = () => {\n\treturn new Vec2(\n\t\t0,\n\t\tshared.RESOLUTION_HALF.y\n\t);\n}\n\nshared.getPositionCenter = () => {\n\treturn new Vec2(\n\t\t0,\n\t\t0\n\t);\n}\n\nshared.getPositionBottomCenter = () => {\n\treturn new Vec2(\n\t\t0,\n\t\t-shared.RESOLUTION_HALF.y\n\t);\n}\n\nshared.getPositionTopRight = () => {\n\treturn new Vec2(\n\t\tshared.RESOLUTION_HALF.x,\n\t\tshared.RESOLUTION_HALF.y\n\t);\n}\n\nshared.getPositionCenterRight = () => {\n\treturn new Vec2(\n\t\t0,\n\t\tshared.RESOLUTION_HALF.y\n\t);\n}\n\nshared.getPositionBottomRight = () => {\n\treturn new Vec2(\n\t\tshared.RESOLUTION_HALF.x,\n\t\t-shared.RESOLUTION_HALF.y\n\t);\n}\n\nshared.getScaleX = (scale) => {\n\treturn scale.x * shared.SCALE_FACTOR.x;\n}\n\nshared.getScaleY = (scale) => {\n\treturn scale.y * shared.SCALE_FACTOR.y;\n}\n\nshared.getScaleMin = (scale) => {\n\tlet factor = Math.min(shared.SCALE_FACTOR.x, shared.SCALE_FACTOR.y);\n\treturn new Vec2(\n\t\tscale.x * factor,\n\t\tscale.y * factor\n\t);\n}\n\nshared.getScaleMax = (scale) => {\n\tlet factor = Math.max(shared.SCALE_FACTOR.x, shared.SCALE_FACTOR.y);\n\treturn new Vec2(\n\t\tscale.x * factor,\n\t\tscale.y * factor\n\t);\n}\n\nshared.getScaleBackground = (resolution) => {\n\tlet factor = Math.max(\n\t\tengine.screenResolution.x / resolution.x,\n\t\tengine.screenResolution.y / resolution.y\n\t);\n\n\treturn factor;\n}\n\nshared.getFontSize = (size, scale) => {\n\treturn Math.round(size * scale * 100) / 100;\n}\n",
				"value" : true
			}
		},
		{
			"alignment" : "center",
			"alpha" : 1.0,
			"angles" : "0.00000 -0.00000 0.00000",
			"brightness" : 1.0,
			"color" : "1.00000 1.00000 1.00000",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"id" : 184,
			"image" : "models/background.json",
			"locktransforms" : true,
			"name" : "background",
			"origin" : 
			{
				"script" : "// 'use strict';\n\n// let isResolutionChanged = true;\n\n// let origin = new Vec2();\n// let offset = new Vec2();\n\n\n// todo: replaceable background\n// export function applyUserProperties(properties) {\n// \tif (properties.hasOwnProperty('backgroundhorizontaloffset')) {\n// \t\tisResolutionChanged = true;\n\n// \t\toffset.x = Number(properties.backgroundhorizontaloffset);\n// \t}\n\n// \tif (properties.hasOwnProperty('backgroundverticaloffset')) {\n// \t\tisResolutionChanged = true;\n\n// \t\toffset.y = Number(properties.backgroundverticaloffset);\n// \t}\n// }\n\n// /**\n//  * @param {Vec3} value - screen resolution\n//  */\n// export function resizeScreen(value) {\n// \tisResolutionChanged = true;\n// }\n\n// /**\n//  * @param {Vec3} value - for property 'origin'\n//  * @return {Vec3} - update current property value\n//  */\n// export function init(value) {\n// \torigin = value;\n// \treturn value;\n// }\n\n// /**\n//  * @param {Vec3} value - for property 'origin'\n//  * @return {Vec3} - update current property value\n//  */\n// export function update(value) {\n// \tif (isResolutionChanged) {\n// \t\tisResolutionChanged = false;\n\n// \t\tvalue.x = origin.x + offset.x;\n// \t\tvalue.y = origin.y + offset.y;\n// \t}\n\n// \treturn value;\n// }\n",
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 131,
			"scale" : 
			{
				"script" : "'use strict';\n\nlet isResolutionChanged = true;\n\nlet resolution = new Vec2(2560, 1440);\n\n\n// todo: replaceable background\n// export function applyUserProperties(properties) {\n// \tif (properties.hasOwnProperty('backgroundwidth')) {\n// \t\tisResolutionChanged = true;\n\n// \t\twidth = Number(properties.backgroundwidth);\n// \t}\n\n// \tif (properties.hasOwnProperty('backgroundheight')) {\n// \t\tisResolutionChanged = true;\n\n// \t\theight = Number(properties.backgroundheight);\n// \t}\n// }\n\n/**\n * @param {Vec3} value - screen resolution\n */\nexport function resizeScreen(value) {\n\tisResolutionChanged = true;\n}\n\n/**\n * @param {Vec3} value - for property 'scale'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif (isResolutionChanged) {\n\t\tisResolutionChanged = false;\n\n\t\tlet newScale = shared.getScaleBackground(resolution);\n\n\t\tvalue.x = newScale;\n\t\tvalue.y = newScale;\n\t}\n\n\treturn value;\n}\n",
				"value" : "1.00000 1.00000 1.00000"
			},
			"size" : "2560.00000 1440.00000",
			"solid" : true
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 431,
			"locktransforms" : true,
			"name" : "left-lines",
			"origin" : 
			{
				"script" : "'use strict';\n\nlet isResolutionChanged = true;\n\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('aspectratio')) {\n\t\tisResolutionChanged = true;\n\t}\n}\n\n/**\n * @param {Vec3} value - screen resolution\n */\nexport function resizeScreen(value) {\n\tisResolutionChanged = true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif (isResolutionChanged) {\n\t\tisResolutionChanged = false;\n\n\t\tvalue.x = -shared.RESOLUTION_REAL.x * 0.5;\n\t\tvalue.y = shared.RESOLUTION_REAL.y * 0.5;\n\t}\n\n\treturn value;\n}\n",
				"value" : "-1280.00000 720.00000 0.00000"
			},
			"parent" : 131,
			"scale" : 
			{
				"script" : "'use strict';\n\nlet isResolutionChanged = true;\n\nlet scale = new Vec2(1, 1);\n\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('aspectratio')) {\n\t\tisResolutionChanged = true;\n\t}\n}\n\n/**\n * @param {Vec3} value - screen resolution\n */\nexport function resizeScreen(value) {\n\tisResolutionChanged = true;\n}\n\n/**\n * @param {Vec3} value - for property 'scale'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tscale = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'scale'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif (isResolutionChanged) {\n\t\tisResolutionChanged = false;\n\n\t\tlet newScale = shared.getScaleMin(scale);\n\t\tvalue.x = newScale.x;\n\t\tvalue.y = newScale.y;\n\t}\n\n\treturn value;\n}\n",
				"value" : "1.00000 1.00000 1.00000"
			},
			"visible" : 
			{
				"user" : "lefttoplines",
				"value" : true
			}
		},
		{
			"alignment" : "topleft",
			"alpha" : 0.15000001,
			"angles" : "0.00000 -0.00000 0.00000",
			"brightness" : 1.0,
			"color" : "1.00000 1.00000 1.00000",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"id" : 390,
			"image" : "models/circle-1.json",
			"locktransforms" : true,
			"name" : "circle-1",
			"origin" : 
			{
				"script" : "'use strict';\n\nlet origin = new Vec2();\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\torigin = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tlet speed = engine.runtime * 0.5;\n\tvalue.x = origin.x + Math.cos(speed) * shared.LINES_AMPLITUDE;\n\tvalue.y = origin.y + Math.sin(speed) * shared.LINES_AMPLITUDE;\n\n\treturn value;\n}\n\n",
				"value" : "-24.00000 24.00000 0.00000"
			},
			"parent" : 431,
			"scale" : "0.95000 0.95000 1.00000",
			"size" : "818.00000 818.00000",
			"solid" : true
		},
		{
			"alignment" : "topleft",
			"alpha" : 0.15000001,
			"angles" : "0.00000 -0.00000 0.00000",
			"brightness" : 1.0,
			"color" : "1.00000 1.00000 1.00000",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"id" : 330,
			"image" : "models/circle-1.json",
			"locktransforms" : true,
			"name" : "circle-1",
			"origin" : 
			{
				"script" : "'use strict';\n\nlet origin = new Vec2();\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\torigin = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tlet speed = engine.runtime * 0.5;\n\tvalue.x = origin.x - Math.cos(speed) * shared.LINES_AMPLITUDE;\n\tvalue.y = origin.y - Math.sin(speed) * shared.LINES_AMPLITUDE;\n\n\treturn value;\n}\n\n",
				"value" : "-24.00000 24.00000 0.00000"
			},
			"parent" : 431,
			"size" : "818.00000 818.00000",
			"solid" : true
		},
		{
			"alignment" : "top",
			"alpha" : 0.15000001,
			"angles" : "0.00000 -0.00000 0.78540",
			"brightness" : 1.0,
			"color" : "0.00000 0.00000 0.00000",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"id" : 106,
			"image" : "models/util/solidlayer.json",
			"locktransforms" : true,
			"name" : "Solid",
			"origin" : 
			{
				"script" : "'use strict';\n\nlet origin = new Vec2();\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\torigin = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tlet speed = engine.runtime * 0.5;\n\tvalue.x = origin.x + Math.cos(speed + 3) * shared.LINES_AMPLITUDE;\n\tvalue.y = origin.y + Math.sin(speed + 3) * shared.LINES_AMPLITUDE;\n\n\treturn value;\n}\n",
				"value" : "80.00000 24.00000 0.00000"
			},
			"parent" : 431,
			"size" : "3.00000 1650.00000",
			"solid" : true
		},
		{
			"alignment" : "top",
			"alpha" : 0.15000001,
			"angles" : "0.00000 -0.00000 0.78540",
			"brightness" : 1.0,
			"color" : "0.00000 0.00000 0.00000",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"id" : 111,
			"image" : "models/util/solidlayer.json",
			"locktransforms" : true,
			"name" : "Solid",
			"origin" : 
			{
				"script" : "'use strict';\n\nlet origin = new Vec2();\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\torigin = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tlet speed = engine.runtime * 0.5;\n\tvalue.x = origin.x - Math.cos(speed + 3) * shared.LINES_AMPLITUDE;\n\tvalue.y = origin.y - Math.sin(speed + 3) * shared.LINES_AMPLITUDE;\n\n\treturn value;\n}\n",
				"value" : "-24.00000 24.00000 0.00000"
			},
			"parent" : 431,
			"size" : "3.00000 2024.00000",
			"solid" : true
		},
		{
			"alignment" : "top",
			"alpha" : 0.15000001,
			"angles" : "0.00000 -0.00000 0.78540",
			"brightness" : 1.0,
			"color" : "0.00000 0.00000 0.00000",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"id" : 108,
			"image" : "models/util/solidlayer.json",
			"locktransforms" : true,
			"name" : "Solid",
			"origin" : 
			{
				"script" : "'use strict';\n\nlet origin = new Vec2();\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\torigin = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tlet speed = engine.runtime * 0.5;\n\tvalue.x = origin.x + Math.cos(speed + 3) * shared.LINES_AMPLITUDE;\n\tvalue.y = origin.y + Math.sin(speed + 3) * shared.LINES_AMPLITUDE;\n\n\treturn value;\n}\n",
				"value" : "-24.00000 -80.00000 0.00000"
			},
			"parent" : 431,
			"size" : "3.00000 1800.00000",
			"solid" : true
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 193,
			"locktransforms" : true,
			"name" : "right-lines",
			"origin" : 
			{
				"script" : "'use strict';\n\nlet isResolutionChanged = true;\n\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('aspectratio')) {\n\t\tisResolutionChanged = true;\n\t}\n}\n\n/**\n * @param {Vec3} value - screen resolution\n */\nexport function resizeScreen(value) {\n\tisResolutionChanged = true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif (isResolutionChanged) {\n\t\tisResolutionChanged = false;\n\n\t\tvalue.x = shared.RESOLUTION_REAL.x * 0.5;\n\t\tvalue.y = -shared.RESOLUTION_REAL.y * 0.5;\n\t}\n\n\treturn value;\n}\n",
				"value" : "1280.00000 -720.00000 0.00000"
			},
			"parent" : 131,
			"scale" : 
			{
				"script" : "'use strict';\n\nlet isResolutionChanged = true;\n\nlet scale = new Vec2(1, 1);\n\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('aspectratio')) {\n\t\tisResolutionChanged = true;\n\t}\n}\n\n/**\n * @param {Vec3} value - screen resolution\n */\nexport function resizeScreen(value) {\n\tisResolutionChanged = true;\n}\n\n/**\n * @param {Vec3} value - for property 'scale'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tscale = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'scale'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif (isResolutionChanged) {\n\t\tisResolutionChanged = false;\n\n\t\tlet newScale = shared.getScaleMin(scale);\n\t\tvalue.x = newScale.x;\n\t\tvalue.y = newScale.y;\n\t}\n\n\treturn value;\n}\n",
				"value" : "-1.00000 -1.00000 1.00000"
			},
			"visible" : 
			{
				"user" : "rightbottomlines",
				"value" : true
			}
		},
		{
			"alignment" : "topleft",
			"alpha" : 0.15000001,
			"angles" : "0.00000 -0.00000 0.00000",
			"brightness" : 1.0,
			"color" : "1.00000 1.00000 1.00000",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"id" : 203,
			"image" : "models/circle-1.json",
			"locktransforms" : true,
			"name" : "circle-1",
			"origin" : 
			{
				"script" : "'use strict';\n\nlet origin = new Vec2();\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\torigin = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tlet speed = engine.runtime * 0.5;\n\tvalue.x = origin.x + Math.cos(speed) * shared.LINES_AMPLITUDE;\n\tvalue.y = origin.y + Math.sin(speed) * shared.LINES_AMPLITUDE;\n\n\treturn value;\n}\n\n",
				"value" : "-24.00000 24.00000 0.00000"
			},
			"parent" : 193,
			"scale" : "0.95000 0.95000 1.00000",
			"size" : "818.00000 818.00000",
			"solid" : true
		},
		{
			"alignment" : "topleft",
			"alpha" : 0.15000001,
			"angles" : "0.00000 -0.00000 0.00000",
			"brightness" : 1.0,
			"color" : "1.00000 1.00000 1.00000",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"id" : 200,
			"image" : "models/circle-1.json",
			"locktransforms" : true,
			"name" : "circle-1",
			"origin" : 
			{
				"script" : "'use strict';\n\nlet origin = new Vec2();\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\torigin = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tlet speed = engine.runtime * 0.5;\n\tvalue.x = origin.x - Math.cos(speed) * shared.LINES_AMPLITUDE;\n\tvalue.y = origin.y - Math.sin(speed) * shared.LINES_AMPLITUDE;\n\n\treturn value;\n}\n\n",
				"value" : "-24.00000 24.00000 0.00000"
			},
			"parent" : 193,
			"size" : "818.00000 818.00000",
			"solid" : true
		},
		{
			"alignment" : "top",
			"alpha" : 0.15000001,
			"angles" : "0.00000 -0.00000 0.78540",
			"brightness" : 1.0,
			"color" : "0.00000 0.00000 0.00000",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"id" : 198,
			"image" : "models/util/solidlayer.json",
			"locktransforms" : true,
			"name" : "Solid",
			"origin" : 
			{
				"script" : "'use strict';\n\nlet origin = new Vec2();\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\torigin = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tlet speed = engine.runtime * 0.5;\n\tvalue.x = origin.x + Math.cos(speed + 3) * shared.LINES_AMPLITUDE;\n\tvalue.y = origin.y + Math.sin(speed + 3) * shared.LINES_AMPLITUDE;\n\n\treturn value;\n}\n",
				"value" : "80.00000 24.00000 0.00000"
			},
			"parent" : 193,
			"size" : "3.00000 1650.00000",
			"solid" : true
		},
		{
			"alignment" : "top",
			"alpha" : 0.15000001,
			"angles" : "0.00000 -0.00000 0.78540",
			"brightness" : 1.0,
			"color" : "0.00000 0.00000 0.00000",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"id" : 196,
			"image" : "models/util/solidlayer.json",
			"locktransforms" : true,
			"name" : "Solid",
			"origin" : 
			{
				"script" : "'use strict';\n\nlet origin = new Vec2();\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\torigin = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tlet speed = engine.runtime * 0.5;\n\tvalue.x = origin.x - Math.cos(speed + 3) * shared.LINES_AMPLITUDE;\n\tvalue.y = origin.y - Math.sin(speed + 3) * shared.LINES_AMPLITUDE;\n\n\treturn value;\n}\n",
				"value" : "-24.00000 24.00000 0.00000"
			},
			"parent" : 193,
			"size" : "3.00000 2024.00000",
			"solid" : true
		},
		{
			"alignment" : "top",
			"alpha" : 0.15000001,
			"angles" : "0.00000 -0.00000 0.78540",
			"brightness" : 1.0,
			"color" : "0.00000 0.00000 0.00000",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"id" : 194,
			"image" : "models/util/solidlayer.json",
			"locktransforms" : true,
			"name" : "Solid",
			"origin" : 
			{
				"script" : "'use strict';\n\nlet origin = new Vec2();\n\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\torigin = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tlet speed = engine.runtime * 0.5;\n\tvalue.x = origin.x + Math.cos(speed + 3) * shared.LINES_AMPLITUDE;\n\tvalue.y = origin.y + Math.sin(speed + 3) * shared.LINES_AMPLITUDE;\n\n\treturn value;\n}\n",
				"value" : "-24.00000 -80.00000 0.00000"
			},
			"parent" : 193,
			"size" : "3.00000 1800.00000",
			"solid" : true
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 128,
			"locktransforms" : true,
			"name" : "left-top-text",
			"origin" : 
			{
				"script" : "'use strict';\n\nlet isResolutionChanged = true;\n\nlet origin = new Vec2();\n\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('aspectratio')) {\n\t\tisResolutionChanged = true;\n\t}\n}\n\n/**\n * @param {Vec3} value - screen resolution\n */\nexport function resizeScreen(value) {\n\tisResolutionChanged = true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\torigin = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif (isResolutionChanged) {\n\t\tisResolutionChanged = false;\n\n\t\tlet position = shared.getPosition(origin);\n\t\tvalue.x = position.x;\n\t\tvalue.y = position.y;\n\t}\n\n\treturn value;\n}\n",
				"value" : "-820.00000 495.00000 0.00000"
			},
			"parent" : 131,
			"scale" : 
			{
				"script" : "'use strict';\n\nlet isResolutionChanged = true;\n\nlet scale = new Vec2(1, 1);\n\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('aspectratio')) {\n\t\tisResolutionChanged = true;\n\t}\n}\n\n/**\n * @param {Vec3} value - screen resolution\n */\nexport function resizeScreen(value) {\n\tisResolutionChanged = true;\n}\n\n/**\n * @param {Vec3} value - for property 'scale'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tscale = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'scale'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif (isResolutionChanged) {\n\t\tisResolutionChanged = false;\n\n\t\tlet newScale = shared.getScaleMin(scale);\n\t\tvalue.x = newScale.x;\n\t\tvalue.y = newScale.y;\n\t}\n\n\treturn value;\n}\n",
				"value" : "1.00000 1.00000 1.00000"
			}
		},
		{
			"alpha" : 0.25,
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"brightness" : 1.0,
			"color" : "0.27843 0.27059 0.24314",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"font" : "fonts/FOT-Rodin Pro DB.otf",
			"horizontalalign" : "left",
			"id" : 251,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"locktransforms" : true,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "text-shadow",
			"opaquebackground" : false,
			"origin" : "-357.00000 -8.00000 0.00000",
			"padding" : 0,
			"parent" : 128,
			"pointsize" : 
			{
				"script" : "'use strict';\n\nlet isResolutionChanged = true;\n\nlet size = 1;\n\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('aspectratio')) {\n\t\tisResolutionChanged = true;\n\t}\n}\n\n/**\n * @param {Vec3} value - screen resolution\n */\nexport function resizeScreen(value) {\n\tisResolutionChanged = true;\n}\n\n/**\n * @param {Number} value - for property 'pointsize'\n * @return {Number} - update current property value\n */\nexport function init(value) {\n\tsize = value;\n\treturn value;\n}\n\n/**\n * @param {Number} value - for property 'pointsize'\n * @return {Number} - update current property value\n */\nexport function update(value) {\n\tif (isResolutionChanged) {\n\t\tisResolutionChanged = false;\n\n\t\treturn shared.getFontSize(size, thisLayer.getParent().scale.x);\n\t}\n\n\treturn value;\n}\n",
				"value" : 17.0
			},
			"scale" : 
			{
				"script" : "'use strict';\n\nlet isResolutionChanged = true;\n\nlet scale = new Vec2(1, 1);\n\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('aspectratio')) {\n\t\tisResolutionChanged = true;\n\t}\n}\n\n/**\n * @param {Vec3} value - screen resolution\n */\nexport function resizeScreen(value) {\n\tisResolutionChanged = true;\n}\n\n/**\n * @param {Vec3} value - for property 'scale'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tscale = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'scale'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif (isResolutionChanged) {\n\t\tisResolutionChanged = false;\n\n\t\tlet newScale =  1 / thisLayer.getParent().scale.x;\n\t\tvalue.x = newScale;\n\t\tvalue.y = newScale;\n\t}\n\n\treturn value;\n}\n",
				"value" : "1.00000 1.00000 1.00000"
			},
			"size" : "247.00000 142.00000",
			"solid" : true,
			"text" : 
			{
				"user" : "textvalue",
				"value" : "TODAY"
			},
			"verticalalign" : "center",
			"visible" : 
			{
				"user" : "textshadow",
				"value" : true
			}
		},
		{
			"alpha" : 1.0,
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"brightness" : 1.0,
			"color" : "0.27843 0.27059 0.24314",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"font" : "fonts/FOT-Rodin Pro DB.otf",
			"horizontalalign" : "left",
			"id" : 113,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : false,
			"locktransforms" : true,
			"maxrows" : 1,
			"maxwidth" : 500.0,
			"name" : "text",
			"opaquebackground" : false,
			"origin" : "-365.00000 0.00000 0.00000",
			"padding" : 0,
			"parent" : 128,
			"pointsize" : 
			{
				"script" : "'use strict';\n\nlet isResolutionChanged = true;\n\nlet size = 1;\n\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('aspectratio')) {\n\t\tisResolutionChanged = true;\n\t}\n}\n\n/**\n * @param {Vec3} value - screen resolution\n */\nexport function resizeScreen(value) {\n\tisResolutionChanged = true;\n}\n\n/**\n * @param {Number} value - for property 'pointsize'\n * @return {Number} - update current property value\n */\nexport function init(value) {\n\tsize = value;\n\treturn value;\n}\n\n/**\n * @param {Number} value - for property 'pointsize'\n * @return {Number} - update current property value\n */\nexport function update(value) {\n\tif (isResolutionChanged) {\n\t\tisResolutionChanged = false;\n\n\t\treturn shared.getFontSize(size, thisLayer.getParent().scale.x);\n\t}\n\n\treturn value;\n}\n",
				"value" : 17.0
			},
			"scale" : 
			{
				"script" : "'use strict';\n\nlet isResolutionChanged = true;\n\nlet scale = new Vec2(1, 1);\n\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('aspectratio')) {\n\t\tisResolutionChanged = true;\n\t}\n}\n\n/**\n * @param {Vec3} value - screen resolution\n */\nexport function resizeScreen(value) {\n\tisResolutionChanged = true;\n}\n\n/**\n * @param {Vec3} value - for property 'scale'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tscale = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'scale'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif (isResolutionChanged) {\n\t\tisResolutionChanged = false;\n\n\t\tlet newScale =  1 / thisLayer.getParent().scale.x;\n\t\tvalue.x = newScale;\n\t\tvalue.y = newScale;\n\t}\n\n\treturn value;\n}\n",
				"value" : "1.00000 1.00000 1.00000"
			},
			"size" : "247.00000 142.00000",
			"solid" : true,
			"text" : 
			{
				"user" : "textvalue",
				"value" : "TODAY"
			},
			"verticalalign" : "center",
			"visible" : 
			{
				"user" : "text",
				"value" : true
			}
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 294,
			"locktransforms" : true,
			"name" : "clock",
			"origin" : 
			{
				"script" : "'use strict';\n\nlet isResolutionChanged = true;\n\nlet origin = new Vec2();\n\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('aspectratio')) {\n\t\tisResolutionChanged = true;\n\t}\n}\n\n/**\n * @param {Vec3} value - screen resolution\n */\nexport function resizeScreen(value) {\n\tisResolutionChanged = true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\torigin = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif (isResolutionChanged) {\n\t\tisResolutionChanged = false;\n\n\t\tlet newOrigin = shared.getPosition(origin);\n\t\tvalue.x = newOrigin.x;\n\t\tvalue.y = newOrigin.y;\n\t}\n\n\treturn value;\n}\n",
				"value" : "-820.00000 0.00000 0.00000"
			},
			"parent" : 131,
			"scale" : 
			{
				"script" : "'use strict';\n\nlet isResolutionChanged = true;\n\nlet scale = new Vec2(1, 1);\n\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('aspectratio')) {\n\t\tisResolutionChanged = true;\n\t}\n}\n\n/**\n * @param {Vec3} value - screen resolution\n */\nexport function resizeScreen(value) {\n\tisResolutionChanged = true;\n}\n\n/**\n * @param {Vec3} value - for property 'scale'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tscale = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'scale'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif (isResolutionChanged) {\n\t\tisResolutionChanged = false;\n\n\t\tlet newScale = shared.getScaleMin(scale);\n\t\tvalue.x = newScale.x;\n\t\tvalue.y = newScale.y;\n\t}\n\n\treturn value;\n}\n",
				"value" : "1.00000 1.00000 1.00000"
			},
			"visible" : 
			{
				"user" : "clock",
				"value" : true
			}
		},
		{
			"alignment" : "center",
			"alpha" : 1.0,
			"angles" : "0.00000 -0.00000 0.00000",
			"brightness" : 1.0,
			"color" : "1.00000 1.00000 1.00000",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"id" : 117,
			"image" : "models/pointer.json",
			"locktransforms" : true,
			"name" : "pointer",
			"origin" : "-346.00000 0.00000 0.00000",
			"parent" : 294,
			"size" : "61.00000 178.00000",
			"solid" : true,
			"visible" : 
			{
				"user" : "pointer",
				"value" : true
			}
		},
		{
			"alignment" : "center",
			"alpha" : 1.0,
			"angles" : "0.00000 -0.00000 0.00000",
			"brightness" : 1.0,
			"color" : "1.00000 1.00000 1.00000",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"id" : 362,
			"image" : "models/clock-bar-lines.json",
			"locktransforms" : true,
			"name" : "time-bar-lines",
			"origin" : "51.47876 52.00000 0.00000",
			"parent" : 294,
			"size" : "684.00000 100.00000",
			"solid" : true,
			"visible" : 
			{
				"user" : "timebarlines",
				"value" : true
			}
		},
		{
			"alignment" : "center",
			"alpha" : 
			{
				"script" : "'use strict';\n\n/**\n * @param {Number} value - for property 'alpha'\n * @return {Number} - update current property value\n */\nexport function update(value) {\n\tlet delta = Math.sin(engine.runtime * 4) * 0.3 + 1.05;\n\n\treturn shared.clamp(delta, 0.8, 1);\n}\n",
				"value" : 1.0
			},
			"angles" : "0.00000 -0.00000 0.00000",
			"brightness" : 1.0,
			"color" : "1.00000 1.00000 1.00000",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"id" : 358,
			"image" : "models/clock-bar.json",
			"locktransforms" : true,
			"name" : "time-bar",
			"origin" : "51.47876 53.00000 0.00000",
			"parent" : 294,
			"size" : "687.00000 81.00000",
			"solid" : true,
			"visible" : 
			{
				"user" : "timebar",
				"value" : true
			}
		},
		{
			"alignment" : "center",
			"alpha" : 1.0,
			"angles" : "0.00000 -0.00000 0.00000",
			"brightness" : 1.0,
			"color" : "1.00000 1.00000 1.00000",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"id" : 366,
			"image" : "models/date-bar.json",
			"locktransforms" : true,
			"name" : "date-bar",
			"origin" : "50.47876 -50.00000 0.00000",
			"parent" : 294,
			"size" : "672.00000 65.00000",
			"solid" : true,
			"visible" : 
			{
				"user" : "datebar",
				"value" : true
			}
		},
		{
			"alpha" : 1.0,
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"brightness" : 1.0,
			"color" : "0.72549 0.69412 0.60784",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"font" : "fonts/FOT-Rodin Pro DB.otf",
			"horizontalalign" : "left",
			"id" : 202,
			"limitrows" : false,
			"limituseellipsis" : false,
			"limitwidth" : true,
			"locktransforms" : true,
			"maxrows" : 1,
			"maxwidth" : 560.0,
			"name" : "time",
			"opaquebackground" : false,
			"origin" : "-229.00000 54.00000 0.00000",
			"padding" : 0,
			"parent" : 294,
			"perspective" : true,
			"pointsize" : 
			{
				"script" : "'use strict';\n\nlet isResolutionChanged = true;\n\nlet size = 1;\n\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('aspectratio')) {\n\t\tisResolutionChanged = true;\n\t}\n}\n\n/**\n * @param {Vec3} value - screen resolution\n */\nexport function resizeScreen(value) {\n\tisResolutionChanged = true;\n}\n\n/**\n * @param {Number} value - for property 'pointsize'\n * @return {Number} - update current property value\n */\nexport function init(value) {\n\tsize = value;\n\treturn value;\n}\n\n/**\n * @param {Number} value - for property 'pointsize'\n * @return {Number} - update current property value\n */\nexport function update(value) {\n\tif (isResolutionChanged) {\n\t\tisResolutionChanged = false;\n\n\t\treturn shared.getFontSize(size, thisLayer.getParent().scale.x);\n\t}\n\n\treturn value;\n}\n",
				"value" : 8.0
			},
			"scale" : 
			{
				"script" : "'use strict';\n\nlet isResolutionChanged = true;\n\nlet scale = new Vec2(1, 1);\n\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('aspectratio')) {\n\t\tisResolutionChanged = true;\n\t}\n}\n\n/**\n * @param {Vec3} value - screen resolution\n */\nexport function resizeScreen(value) {\n\tisResolutionChanged = true;\n}\n\n/**\n * @param {Vec3} value - for property 'scale'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tscale = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'scale'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif (isResolutionChanged) {\n\t\tisResolutionChanged = false;\n\n\t\tlet newScale =  1 / thisLayer.getParent().scale.x;\n\t\tvalue.x = newScale;\n\t\tvalue.y = newScale;\n\t}\n\n\treturn value;\n}\n",
				"value" : "1.00000 1.00000 1.00000"
			},
			"size" : "228.00000 67.00000",
			"solid" : true,
			"text" : 
			{
				"script" : "'use strict';\n// Please note: Do not remove this line or asset references may break.\nexport let __workshopId = '2626323187';\n\nexport var scriptProperties = createScriptProperties()\n\t.addCheckbox({\n\t\tname: 'showHours',\n\t\tlabel: 'Show hours',\n\t\tvalue: true\n\t})\n\t.addCheckbox({\n\t\tname: 'showMinutes',\n\t\tlabel: 'Show minutes',\n\t\tvalue: true\n\t})\n\t.addCheckbox({\n\t\tname: 'showSeconds',\n\t\tlabel: 'Show seconds',\n\t\tvalue: false\n\t})\n\t.addCheckbox({\n\t\tname: 'showMilliseconds',\n\t\tlabel: 'Show milliseconds',\n\t\tvalue: false\n\t})\n\t.addCheckbox({\n\t\tname: 'use24hFormat',\n\t\tlabel: 'ui_editor_properties_use_24h_format',\n\t\tvalue: true\n\t})\n\t.addCheckbox({\n\t\tname: 'ampm',\n\t\tlabel: 'Show AM/PM (in 12h format)',\n\t\tvalue: false\n\t})\n\t.addText({\n\t\tname: 'delimiter',\n\t\tlabel: 'Delimiter (anything between {})',\n\t\tvalue: '{:}'\n\t})\n\t.addText({\n\t\tname: 'whitespaces',\n\t\tlabel: 'Whitespaces (anything between {})',\n\t\tvalue: '{}'\n\t})\n\t.finish();\n\nlet delimiter, whitespaces;\nexport function update(value) {\n\n\tvalue = '';\n\n\tlet time = new Date();\n\tlet hours = time.getHours();\n\tlet minutes\n\tlet seconds;\n\tlet milliseconds;\n\tlet suffix = '';\n\n\t//Clock\n\tif (!scriptProperties.use24hFormat) {\n\t\tif (scriptProperties.ampm) suffix = hours >= 12 ? ' PM' : ' AM';\n\t\thours %= 12;\n\t\tif (hours == 0) {\n\t\t\thours = 12;\n\t\t}\n\t}\n\t\n\thours = (\"00\" + hours).slice(-2);\n\tminutes = (\"00\" + time.getMinutes()).slice(-2);\n\tseconds = (\"00\" + time.getSeconds()).slice(-2);\n\tmilliseconds = (\"00\" + time.getMilliseconds()).slice(-2);\n\n\tif (scriptProperties.showHours)\n\t{\n\t\tvalue = hours;\n\t}\n\tif (scriptProperties.showMinutes)\n\t{\n\t\tvalue += delimiter + minutes;\n\t}\n\tif (scriptProperties.showSeconds)\n\t{\n\t\tvalue += delimiter + seconds;\n\t}\n\tif (scriptProperties.showMilliseconds)\n\t{\n\t\tvalue += delimiter + milliseconds;\n\t}\n\n\tvalue += suffix;\n\n\tif (whitespaces != \"\")\n\t{\n\t\tlet temp = \"\";\n\t\tfor (let i = 0; i < value.length; i++)\n\t\t{\n\t\t\ttemp += value[i] + whitespaces;\n\t\t}\n\t\tvalue = temp;\n\t}\n\n\treturn value;\n}\n\nexport function init() {\n\tdelimiter = getDelimiter(scriptProperties.delimiter);\n\twhitespaces = getDelimiter(scriptProperties.whitespaces);\n}\n\nfunction getDelimiter(str)\n{\n\tlet delim;\n\tif (str != undefined && str.length >= 2)\n\t{\n\t\tdelim = str.substring(\n\t\tstr.indexOf(\"{\") + 1, \n\t\tstr.lastIndexOf(\"}\")\n\t\t);\n\t}\n\telse delim = \"\";\n\treturn delim;\n}\n",
				"scriptproperties" : 
				{
					"ampm" : 
					{
						"user" : "ampm",
						"value" : true
					},
					"delimiter" : "{:}",
					"showHours" : true,
					"showMilliseconds" : false,
					"showMinutes" : true,
					"showSeconds" : 
					{
						"user" : "seconds",
						"value" : true
					},
					"use24hFormat" : 
					{
						"user" : "_24hrformat",
						"value" : false
					},
					"whitespaces" : "{}"
				},
				"value" : "12:34:56 AM"
			},
			"verticalalign" : "center",
			"visible" : 
			{
				"user" : "time",
				"value" : true
			}
		},
		{
			"alpha" : 1.0,
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"brightness" : 1.0,
			"color" : "0.25882 0.25098 0.21569",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"font" : "fonts/FOT-Rodin Pro DB.otf",
			"horizontalalign" : "left",
			"id" : 225,
			"limitrows" : true,
			"limituseellipsis" : false,
			"limitwidth" : true,
			"locktransforms" : true,
			"maxrows" : 1,
			"maxwidth" : 559.79053,
			"name" : "date",
			"opaquebackground" : false,
			"origin" : "-229.00000 -49.00000 0.00000",
			"padding" : 0,
			"parent" : 294,
			"pointsize" : 
			{
				"script" : "'use strict';\n\nlet isResolutionChanged = true;\n\nlet size = 1;\n\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('aspectratio')) {\n\t\tisResolutionChanged = true;\n\t}\n}\n\n/**\n * @param {Vec3} value - screen resolution\n */\nexport function resizeScreen(value) {\n\tisResolutionChanged = true;\n}\n\n/**\n * @param {Number} value - for property 'pointsize'\n * @return {Number} - update current property value\n */\nexport function init(value) {\n\tsize = value;\n\treturn value;\n}\n\n/**\n * @param {Number} value - for property 'pointsize'\n * @return {Number} - update current property value\n */\nexport function update(value) {\n\tif (isResolutionChanged) {\n\t\tisResolutionChanged = false;\n\n\t\treturn shared.getFontSize(size, thisLayer.getParent().scale.x);\n\t}\n\n\treturn value;\n}\n",
				"value" : 8.0
			},
			"scale" : 
			{
				"script" : "'use strict';\n\nlet isResolutionChanged = true;\n\nlet scale = new Vec2(1, 1);\n\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('aspectratio')) {\n\t\tisResolutionChanged = true;\n\t}\n}\n\n/**\n * @param {Vec3} value - screen resolution\n */\nexport function resizeScreen(value) {\n\tisResolutionChanged = true;\n}\n\n/**\n * @param {Vec3} value - for property 'scale'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tscale = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'scale'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif (isResolutionChanged) {\n\t\tisResolutionChanged = false;\n\n\t\tlet newScale =  1 / thisLayer.getParent().scale.x;\n\t\tvalue.x = newScale;\n\t\tvalue.y = newScale;\n\t}\n\n\treturn value;\n}\n",
				"value" : "1.00000 1.00000 1.00000"
			},
			"size" : "534.00000 67.00000",
			"solid" : true,
			"text" : 
			{
				"script" : "'use strict';\n// Please note: Do not remove this line or asset references may break.\nexport let __workshopId = '2108644365';\n\n\nexport var scriptProperties = createScriptProperties()\n\t.addCombo({\n\t\tname: 'monthFormat',\n\t\tlabel: 'Month Format',\n\t\toptions: [{\n\t\t\tlabel: 'Numeric',\n\t\t\tvalue: '1'\n\t\t}, {\n\t\t\tlabel: 'Abbreviated',\n\t\t\tvalue: '2'\n\t\t},{\n\t\t\tlabel: 'Full',\n\t\t\tvalue: '3'\n\t\t}]\n\t})\n\t.addCombo({\n\t\tname: 'dayFormat',\n\t\tlabel: 'Day Format',\n\t\toptions: [{\n\t\t\tlabel: 'Abbreviated',\n\t\t\tvalue: '1'\n\t\t}, {\n\t\t\tlabel: 'Full',\n\t\t\tvalue: '2'\n\t\t}]\n\t})\n\t.addCheckbox({\n\t\tname: 'showDay',\n\t\tlabel: 'Show Day',\n\t\tvalue: false\n\t})\n   .addCheckbox({\n\t\tname: 'alignVertical',\n\t\tlabel: 'Align Day Vertically',\n\t\tvalue: false\n\t})\n  .addCheckbox({\n\t\tname: 'useDelimiter',\n\t\tlabel: 'Use Delimiter',\n\t\tvalue: false\n\t})\n\t.addText({\n\t\tname: 'addDelimiter',\n\t\tlabel: 'Delimiter',\n\t\tvalue: '/'\n\t})\n\t.finish();\n\n\nlet months;\nlet day;\nvar delimiterValue;\nvar newLine;\n/**\n * @param {String} value (for property 'text')\n */\nexport function update(value){\n  if (scriptProperties.useDelimiter == true){\n  delimiterValue = scriptProperties.addDelimiter\n}\n  if (scriptProperties.useDelimiter == false){\n   delimiterValue = [\n  ' '\n]\n}\nif (scriptProperties.alignVertical == true){\n   newLine = [\n  '\\n'\n]\n}\nif (scriptProperties.alignVertical == false){\n   newLine = [\n  ''\n]\n}\n  if (scriptProperties.monthFormat == 1){\n  months = [\n  '1',\n  '2',\n  '3',\n  '4',\n  '5',\n  '6',\n  '7',\n  '8',\n  '9',\n  '10',\n  '11',\n  '12'\n]\n}\n if (scriptProperties.monthFormat == 2){\n months = [\n  'Jan',\n  'Feb',\n  'Mar',\n  'Apr',\n  'May',\n  'Jun',\n  'Jul',\n  'Aug',\n  'Sep',\n  'Oct',\n  'Nov',\n  'Dec'\n]\n}\nif (scriptProperties.monthFormat == 3){\n months = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December'\n]\n}\nif (scriptProperties.dayFormat == 1){\n  day = [\n  'Sun',\n  'Mon',\n  'Tue',\n  'Wed',\n  'Thu',\n  'Fri',\n  'Sat'\n]\n}\nif (scriptProperties.dayFormat == 2){\n day = [\n  'Sunday',\n  'Monday',\n  'Tuesday',\n  'Wednesday',\n  'Thursday',\n  'Friday',\n  'Saturday'\n]\n}\n\tlet date = new Date();{\n    if (scriptProperties.showDay == true ){\n    return day[date.getDay()] + newLine + ' ' + date.getDate() + delimiterValue + months[date.getMonth()] + delimiterValue + date.getFullYear();\n    }\n    if (scriptProperties.showDay == false ){\n\treturn   date.getDate() + delimiterValue + months[date.getMonth()] + delimiterValue + date.getFullYear();\n}\n}\n}\n",
				"scriptproperties" : 
				{
					"addDelimiter" : "",
					"alignVertical" : false,
					"dayFormat" : "2",
					"monthFormat" : "3",
					"showDay" : 
					{
						"user" : "showday",
						"value" : false
					},
					"useDelimiter" : false
				},
				"value" : "Wednesday 23 September 2023"
			},
			"verticalalign" : "center",
			"visible" : 
			{
				"user" : "date",
				"value" : true
			}
		},
		{
			"alignment" : "center",
			"alpha" : 1.0,
			"angles" : "0.00000 -0.00000 0.00000",
			"brightness" : 1.0,
			"color" : "1.00000 1.00000 1.00000",
			"colorBlendMode" : 0,
			"copybackground" : false,
			"effects" : 
			[
				{
					"file" : "effects/workshop/2084198056/Simple_Audio_Bars/effect.json",
					"id" : 287,
					"name" : "",
					"passes" : 
					[
						{
							"combos" : 
							{
								"SHAPE" : 7
							},
							"constantshadervalues" : 
							{
								"Bar Color" : "0.22745098039215686 0.22745098039215686 0.2",
								"Bar Count" : 
								{
									"user" : "audiovisualizerbars",
									"value" : 32
								},
								"Bar Spacing" : 0.2,
								"Lower/Upper Bar Bounds" : "0 0.45",
								"ui_editor_properties_opacity" : 0.89999998
							},
							"id" : 288
						}
					],
					"visible" : true
				}
			],
			"id" : 284,
			"image" : "models/util/composelayer.json",
			"locktransforms" : true,
			"name" : "audio-visualizer",
			"origin" : 
			{
				"script" : "'use strict';\n\nlet isResolutionChanged = true;\n\nlet origin = new Vec2();\n\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('aspectratio')) {\n\t\tisResolutionChanged = true;\n\t}\n}\n\n/**\n * @param {Vec3} value - screen resolution\n */\nexport function resizeScreen(value) {\n\tisResolutionChanged = true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\torigin = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif (isResolutionChanged) {\n\t\tisResolutionChanged = false;\n\n\t\tlet newOrigin = shared.getPosition(origin);\n\t\tvalue.x = newOrigin.x;\n\t\tvalue.y = newOrigin.y;\n\t}\n\n\treturn value;\n}\n",
				"value" : "787.00000 -31.00000 0.00000"
			},
			"parent" : 131,
			"scale" : 
			{
				"script" : "'use strict';\n\nlet isResolutionChanged = true;\n\nlet scale = new Vec2(1, 1);\n\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('aspectratio')) {\n\t\tisResolutionChanged = true;\n\t}\n}\n\n/**\n * @param {Vec3} value - screen resolution\n */\nexport function resizeScreen(value) {\n\tisResolutionChanged = true;\n}\n\n/**\n * @param {Vec3} value - for property 'scale'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tscale = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'scale'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif (isResolutionChanged) {\n\t\tisResolutionChanged = false;\n\n\t\tlet newScale = shared.getScaleMin(scale);\n\t\tvalue.x = newScale.x;\n\t\tvalue.y = newScale.y;\n\t}\n\n\treturn value;\n}\n",
				"value" : "0.35000 0.35000 1.00000"
			},
			"size" : "1920.00000 1080.00000",
			"solid" : true,
			"visible" : 
			{
				"user" : "audiovisualizer",
				"value" : true
			}
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 119,
			"locktransforms" : true,
			"name" : "media-text",
			"origin" : 
			{
				"script" : "'use strict';\n\nlet isResolutionChanged = true;\n\nlet origin = new Vec2();\n\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('aspectratio')) {\n\t\tisResolutionChanged = true;\n\t}\n}\n\n/**\n * @param {Vec3} value - screen resolution\n */\nexport function resizeScreen(value) {\n\tisResolutionChanged = true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\torigin = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif (isResolutionChanged) {\n\t\tisResolutionChanged = false;\n\n\t\tlet newOrigin = shared.getPosition(origin);\n\t\tvalue.x = newOrigin.x;\n\t\tvalue.y = newOrigin.y;\n\t}\n\n\treturn value;\n}\n",
				"value" : "820.00000 -495.00000 0.00000"
			},
			"parent" : 131,
			"scale" : 
			{
				"script" : "'use strict';\n\nlet isResolutionChanged = true;\n\nlet scale = new Vec2(1, 1);\n\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('aspectratio')) {\n\t\tisResolutionChanged = true;\n\t}\n}\n\n/**\n * @param {Vec3} value - screen resolution\n */\nexport function resizeScreen(value) {\n\tisResolutionChanged = true;\n}\n\n/**\n * @param {Vec3} value - for property 'scale'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tscale = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'scale'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif (isResolutionChanged) {\n\t\tisResolutionChanged = false;\n\n\t\tlet newScale = shared.getScaleMin(scale);\n\t\tvalue.x = newScale.x;\n\t\tvalue.y = newScale.y;\n\t}\n\n\treturn value;\n}\n",
				"value" : "1.00000 1.00000 1.00000"
			}
		},
		{
			"alignment" : "center",
			"alpha" : 0.60000002,
			"angles" : "0.00000 -0.00000 0.00000",
			"brightness" : 1.0,
			"color" : "1.00000 1.00000 1.00000",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"id" : 145,
			"image" : "models/media-cover.json",
			"locktransforms" : true,
			"name" : "media-cover",
			"origin" : "-354.00000 82.00000 0.00000",
			"parent" : 119,
			"scale" : "0.30000 0.30000 1.00000",
			"size" : "512.00000 512.00000",
			"solid" : true,
			"visible" : 
			{
				"script" : "'use strict';\n\nlet isVisible = true;\nlet mediaTitle = \"\";\n\n\nfunction updateVisibility() {\n\tthisLayer.visible = isVisible && mediaTitle != \"\";\n}\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('mediacover')) {\n\t\tisVisible = properties.mediacover;\n\t\tupdateVisibility();\n\t}\n}\n\n\nexport function mediaPropertiesChanged(event) {\n\tmediaTitle = event.title;\n\tupdateVisibility();\n}\n\n/**\n * @param {Number} value - for property 'visible'\n * @return {Number} - update current property value\n */\nexport function init(value) {\n\treturn false;\n}\n",
				"value" : true
			}
		},
		{
			"alpha" : 0.25,
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"brightness" : 1.0,
			"color" : "0.23529 0.23137 0.23137",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"font" : "fonts/FOT-Rodin Pro DB.otf",
			"horizontalalign" : "right",
			"id" : 149,
			"limitrows" : true,
			"limituseellipsis" : false,
			"limitwidth" : true,
			"locktransforms" : true,
			"maxrows" : 2,
			"maxwidth" : 630.0,
			"name" : "media-name-shadow",
			"opaquebackground" : false,
			"origin" : "373.00000 -4.00000 0.00000",
			"padding" : 0,
			"parent" : 119,
			"pointsize" : 
			{
				"script" : "'use strict';\n\nlet isResolutionChanged = true;\n\nlet size = 1;\n\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('aspectratio')) {\n\t\tisResolutionChanged = true;\n\t}\n}\n\n/**\n * @param {Vec3} value - screen resolution\n */\nexport function resizeScreen(value) {\n\tisResolutionChanged = true;\n}\n\n/**\n * @param {Number} value - for property 'pointsize'\n * @return {Number} - update current property value\n */\nexport function init(value) {\n\tsize = value;\n\treturn value;\n}\n\n/**\n * @param {Number} value - for property 'pointsize'\n * @return {Number} - update current property value\n */\nexport function update(value) {\n\tif (isResolutionChanged) {\n\t\tisResolutionChanged = false;\n\n\t\treturn shared.getFontSize(size, thisLayer.getParent().scale.x);\n\t}\n\n\treturn value;\n}\n",
				"value" : 9.5
			},
			"scale" : 
			{
				"script" : "'use strict';\n\nlet isResolutionChanged = true;\n\nlet scale = new Vec2(1, 1);\n\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('aspectratio')) {\n\t\tisResolutionChanged = true;\n\t}\n}\n\n/**\n * @param {Vec3} value - screen resolution\n */\nexport function resizeScreen(value) {\n\tisResolutionChanged = true;\n}\n\n/**\n * @param {Vec3} value - for property 'scale'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tscale = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'scale'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif (isResolutionChanged) {\n\t\tisResolutionChanged = false;\n\n\t\tlet newScale =  1 / thisLayer.getParent().scale.x;\n\t\tvalue.x = newScale;\n\t\tvalue.y = newScale;\n\t}\n\n\treturn value;\n}\n",
				"value" : "1.00000 1.00000 1.00000"
			},
			"size" : "240.00000 79.00000",
			"solid" : true,
			"text" : 
			{
				"script" : "// Please note: Do not remove this line or asset references may break.\nexport let __workshopId = '2948115830';\n\nlet title = '';\n\nexport function update(value) {\n\treturn title;\n}\n\nexport function mediaPropertiesChanged(event) {\n\ttitle = event.title;\n}\n",
				"value" : "Media Name"
			},
			"verticalalign" : "bottom",
			"visible" : 
			{
				"user" : "medianameshadow",
				"value" : true
			}
		},
		{
			"alpha" : 1.0,
			"anchor" : "none",
			"angles" : "0.00000 -0.00000 0.00000",
			"backgroundbrightness" : 1.0,
			"backgroundcolor" : "0.00000 0.00000 0.00000",
			"blockalign" : false,
			"brightness" : 1.0,
			"color" : "0.23529 0.23137 0.23137",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"font" : "fonts/FOT-Rodin Pro DB.otf",
			"horizontalalign" : "right",
			"id" : 144,
			"limitrows" : true,
			"limituseellipsis" : false,
			"limitwidth" : true,
			"locktransforms" : true,
			"maxrows" : 2,
			"maxwidth" : 630.0,
			"name" : "media-name",
			"opaquebackground" : false,
			"origin" : "365.00000 4.00000 0.00000",
			"padding" : 0,
			"parent" : 119,
			"pointsize" : 
			{
				"script" : "'use strict';\n\nlet isResolutionChanged = true;\n\nlet size = 1;\n\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('aspectratio')) {\n\t\tisResolutionChanged = true;\n\t}\n}\n\n/**\n * @param {Vec3} value - screen resolution\n */\nexport function resizeScreen(value) {\n\tisResolutionChanged = true;\n}\n\n/**\n * @param {Number} value - for property 'pointsize'\n * @return {Number} - update current property value\n */\nexport function init(value) {\n\tsize = value;\n\treturn value;\n}\n\n/**\n * @param {Number} value - for property 'pointsize'\n * @return {Number} - update current property value\n */\nexport function update(value) {\n\tif (isResolutionChanged) {\n\t\tisResolutionChanged = false;\n\n\t\treturn shared.getFontSize(size, thisLayer.getParent().scale.x);\n\t}\n\n\treturn value;\n}\n",
				"value" : 10.0
			},
			"scale" : 
			{
				"script" : "'use strict';\n\nlet isResolutionChanged = true;\n\nlet scale = new Vec2(1, 1);\n\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('aspectratio')) {\n\t\tisResolutionChanged = true;\n\t}\n}\n\n/**\n * @param {Vec3} value - screen resolution\n */\nexport function resizeScreen(value) {\n\tisResolutionChanged = true;\n}\n\n/**\n * @param {Vec3} value - for property 'scale'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tscale = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'scale'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif (isResolutionChanged) {\n\t\tisResolutionChanged = false;\n\n\t\tlet newScale =  1 / thisLayer.getParent().scale.x;\n\t\tvalue.x = newScale;\n\t\tvalue.y = newScale;\n\t}\n\n\treturn value;\n}\n",
				"value" : "1.00000 1.00000 1.00000"
			},
			"size" : "255.00000 83.00000",
			"solid" : true,
			"text" : 
			{
				"script" : "'use strict';\n\n\nexport function mediaPropertiesChanged(event) {\n\tthisLayer.text = event.title;\n}\n\n/**\n * @param {String} value - for property 'text'\n * @return {String} - update current property value\n */\nexport function init(value) {\n\treturn \"\";\n}\n",
				"value" : "Media Name"
			},
			"verticalalign" : "bottom",
			"visible" : 
			{
				"user" : "medianame",
				"value" : true
			}
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 493,
			"locktransforms" : true,
			"name" : "art",
			"parent" : 131,
			"scale" : 
			{
				"script" : "'use strict';\n\nlet isResolutionChanged = true;\n\nlet scale = new Vec2(1, 1);\n\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('aspectratio')) {\n\t\tisResolutionChanged = true;\n\t}\n}\n\n/**\n * @param {Vec3} value - screen resolution\n */\nexport function resizeScreen(value) {\n\tisResolutionChanged = true;\n}\n\n/**\n * @param {Vec3} value - for property 'scale'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tscale = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'scale'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif (isResolutionChanged) {\n\t\tisResolutionChanged = false;\n\n\t\tlet newScale = shared.getScaleMin(scale);\n\t\tvalue.x = newScale.x;\n\t\tvalue.y = newScale.y;\n\t}\n\n\treturn value;\n}\n",
				"value" : "1.00000 1.00000 1.00000"
			}
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 147,
			"locktransforms" : true,
			"name" : "default",
			"parent" : 493,
			"visible" : 
			{
				"script" : "'use strict';\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('art')) {\n\t\tthisLayer.visible = properties.art == thisLayer.name;\n\t}\n}\n",
				"value" : true
			}
		},
		{
			"alignment" : "center",
			"alpha" : 1.0,
			"angles" : "0.00000 -0.00000 0.00000",
			"brightness" : 1.0,
			"color" : "1.00000 1.00000 1.00000",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"id" : 322,
			"image" : "models/art-center.json",
			"locktransforms" : true,
			"name" : "art-center",
			"origin" : 
			{
				"script" : "'use strict';\n\nlet origin = new Vec2();\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n    origin = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tvalue.y = origin.y - (Math.sin(engine.runtime * 0.8) * 2);\n\treturn value;\n}\n",
				"value" : "-15.50012 -20.00006 0.00000"
			},
			"parent" : 147,
			"scale" : "0.90000 0.90000 1.00000",
			"size" : "701.00000 510.00000",
			"solid" : true
		},
		{
			"alignment" : "center",
			"alpha" : 1.0,
			"angles" : "0.00000 -0.00000 0.00000",
			"brightness" : 1.0,
			"color" : "1.00000 1.00000 1.00000",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"id" : 326,
			"image" : "models/art-top.json",
			"locktransforms" : true,
			"name" : "art-top",
			"origin" : 
			{
				"script" : "'use strict';\n\nlet origin = new Vec2();\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n    origin = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tvalue.y = origin.y + (Math.sin(engine.runtime * 0.8 + 2) * 2);\n\treturn value;\n}\n",
				"value" : "14.49988 170.99994 0.00000"
			},
			"parent" : 147,
			"scale" : "0.90000 0.90000 1.00000",
			"size" : "803.00000 950.00000",
			"solid" : true
		},
		{
			"alignment" : "center",
			"alpha" : 1.0,
			"angles" : "0.00000 -0.00000 0.00000",
			"brightness" : 1.0,
			"color" : "1.00000 1.00000 1.00000",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"id" : 314,
			"image" : "models/art-bottom.json",
			"locktransforms" : true,
			"name" : "art-bottom",
			"origin" : 
			{
				"script" : "'use strict';\n\nlet origin = new Vec2();\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n    origin = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tvalue.y = origin.y + (Math.sin(engine.runtime * 0.8 + 3) * 2);\n\treturn value;\n}\n",
				"value" : "-47.00006 -212.00006 0.00000"
			},
			"parent" : 147,
			"scale" : "0.90000 0.90000 1.00000",
			"size" : "730.00000 847.00000",
			"solid" : true
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 148,
			"locktransforms" : true,
			"name" : "no-characters",
			"origin" : "0.00000 -0.00024 0.00000",
			"parent" : 493,
			"visible" : 
			{
				"script" : "'use strict';\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('art')) {\n\t\tthisLayer.visible = properties.art == thisLayer.name;\n\t}\n}\n",
				"value" : true
			}
		},
		{
			"alignment" : "center",
			"alpha" : 1.0,
			"angles" : "0.00000 -0.00000 0.00000",
			"brightness" : 1.0,
			"color" : "1.00000 1.00000 1.00000",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"id" : 167,
			"image" : "models/art-center-no-characers.json",
			"locktransforms" : true,
			"name" : "art-center-no-characers",
			"origin" : 
			{
				"script" : "'use strict';\n\nlet origin = new Vec2();\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n    origin = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tvalue.y = origin.y - (Math.sin(engine.runtime * 0.8) * 2);\n\treturn value;\n}\n",
				"value" : "-15.50012 -20.00006 0.00000"
			},
			"parent" : 148,
			"scale" : "0.90000 0.90000 1.00000",
			"size" : "701.00000 510.00000",
			"solid" : true
		},
		{
			"alignment" : "center",
			"alpha" : 1.0,
			"angles" : "0.00000 -0.00000 0.00000",
			"brightness" : 1.0,
			"color" : "1.00000 1.00000 1.00000",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"id" : 170,
			"image" : "models/art-top-no-characers.json",
			"locktransforms" : true,
			"name" : "art-top-no-characers",
			"origin" : 
			{
				"script" : "'use strict';\n\nlet origin = new Vec2();\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n    origin = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tvalue.y = origin.y + (Math.sin(engine.runtime * 0.8 + 2) * 2);\n\treturn value;\n}\n",
				"value" : "14.49988 170.99994 0.00000"
			},
			"parent" : 148,
			"scale" : "0.90000 0.90000 1.00000",
			"size" : "803.00000 950.00000",
			"solid" : true
		},
		{
			"alignment" : "center",
			"alpha" : 1.0,
			"angles" : "0.00000 -0.00000 0.00000",
			"brightness" : 1.0,
			"color" : "1.00000 1.00000 1.00000",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"id" : 174,
			"image" : "models/art-bottom-no-characers.json",
			"locktransforms" : true,
			"name" : "art-bottom-no-characers",
			"origin" : 
			{
				"script" : "'use strict';\n\nlet origin = new Vec2();\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n    origin = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tvalue.y = origin.y + (Math.sin(engine.runtime * 0.8 + 3) * 2);\n\treturn value;\n}\n",
				"value" : "-47.00006 -212.00006 0.00000"
			},
			"parent" : 148,
			"scale" : "0.90000 0.90000 1.00000",
			"size" : "730.00000 847.00000",
			"solid" : true
		},
		{
			"alignment" : "center",
			"alpha" : 1.0,
			"angles" : "0.00000 -0.00000 0.00000",
			"brightness" : 1.0,
			"color" : "1.00000 1.00000 1.00000",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"id" : 318,
			"image" : "models/art-bottom-cube.json",
			"locktransforms" : true,
			"name" : "art-bottom-cube",
			"origin" : 
			{
				"script" : "'use strict';\n\nlet origin = new Vec2();\n\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('art')) {\n\t\tthisLayer.visible = properties.art == \"default\" || properties.art == \"no-characters\";\n\t}\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\torigin = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tvalue.y = origin.y - (Math.sin(engine.runtime * 0.8) * 2);\n\treturn value;\n}\n",
				"value" : "174.00000 -355.00000 0.00000"
			},
			"parent" : 493,
			"scale" : "0.90000 0.90000 1.00000",
			"size" : "53.00000 46.00000",
			"solid" : true
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 246,
			"instanceoverride" : 
			{
				"count" : 
				{
					"user" : "particlescount",
					"value" : 1.0
				},
				"id" : 47,
				"lifetime" : 
				{
					"user" : "particleslifetime",
					"value" : 1.0
				},
				"size" : 
				{
					"user" : "particlessize",
					"value" : 1.0
				},
				"speed" : 
				{
					"user" : "particlesspeed",
					"value" : 1.0
				}
			},
			"locktransforms" : true,
			"name" : "particles",
			"origin" : 
			{
				"script" : "'use strict';\n\nlet isResolutionChanged = true;\n\nlet origin = new Vec2();\n\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('aspectratio')) {\n\t\tisResolutionChanged = true;\n\t}\n}\n\n/**\n * @param {Vec3} value - screen resolution\n */\nexport function resizeScreen(value) {\n\tisResolutionChanged = true;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\torigin = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'origin'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif (isResolutionChanged) {\n\t\tisResolutionChanged = false;\n\n\t\tlet newOrigin = shared.getPosition(origin);\n\t\tvalue.x = newOrigin.x;\n\t\tvalue.y = newOrigin.y;\n\t}\n\n\treturn value;\n}\n",
				"value" : "0.00000 0.00000 0.00000"
			},
			"parent" : 131,
			"particle" : "particles/stars.json",
			"scale" : 
			{
				"script" : "'use strict';\n\nlet isResolutionChanged = true;\n\nlet scale = new Vec2(1, 1);\n\n\nexport function applyUserProperties(properties) {\n\tif (properties.hasOwnProperty('aspectratio')) {\n\t\tisResolutionChanged = true;\n\t}\n}\n\n/**\n * @param {Vec3} value - screen resolution\n */\nexport function resizeScreen(value) {\n\tisResolutionChanged = true;\n}\n\n/**\n * @param {Vec3} value - for property 'scale'\n * @return {Vec3} - update current property value\n */\nexport function init(value) {\n\tscale = value;\n\treturn value;\n}\n\n/**\n * @param {Vec3} value - for property 'scale'\n * @return {Vec3} - update current property value\n */\nexport function update(value) {\n\tif (isResolutionChanged) {\n\t\tisResolutionChanged = false;\n\n\t\tlet newScale = shared.getScaleMin(scale);\n\t\tvalue.x = newScale.x;\n\t\tvalue.y = newScale.y;\n\t}\n\n\treturn value;\n}\n",
				"value" : "1.00000 1.00000 1.00000"
			},
			"visible" : 
			{
				"user" : "particles",
				"value" : true
			}
		},
		{
			"alignment" : "center",
			"alpha" : 1.0,
			"brightness" : 1.0,
			"color" : "1.00000 1.00000 1.00000",
			"colorBlendMode" : 0,
			"copybackground" : true,
			"effects" : 
			[
				{
					"file" : "effects/chromaticaberration/effect.json",
					"id" : 99,
					"name" : "",
					"passes" : 
					[
						{
							"constantshadervalues" : 
							{
								"ui_editor_properties_center" : "0.5 0.5",
								"ui_editor_properties_center_falloff" : 1.0,
								"ui_editor_properties_strength" : 
								{
									"user" : "chromaticabberationstrength",
									"value" : 0.15000001
								}
							},
							"id" : 103,
							"textures" : [ null, "chromatic-abberation-mask" ]
						}
					],
					"visible" : true
				}
			],
			"id" : 96,
			"image" : "models/util/fullscreenlayer.json",
			"name" : "chromatic-aberration",
			"parallaxDepth" : "0.00000 0.00000",
			"parent" : 131,
			"solid" : true,
			"visible" : 
			{
				"user" : "chromaticabberation",
				"value" : true
			}
		},
		{
			"angles" : "0.00000 -0.00000 0.00000",
			"id" : 172,
			"locktransforms" : true,
			"maxtime" : 5.0,
			"mintime" : 1.0,
			"muteineditor" : true,
			"name" : "audio",
			"origin" : "-1280.00000 -720.00000 0.00000",
			"parent" : 131,
			"playbackmode" : "loop",
			"sound" : [ "sounds/Fortress of Lies Vocals.mp3" ],
			"startsilent" : false,
			"volume" : 1.0
		}
	],
	"version" : 1
}